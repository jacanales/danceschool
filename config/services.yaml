# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: false     # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\DataFixtures\:
        resource: '../src/DataFixtures'
        tags: [doctrine.fixture.orm]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    app.provider.user:
        class: App\Security\Core\User\FOSUBUserProvider
        arguments: ['@fos_user.user_manager', {facebook: facebookId}]

    app.builder.menu:
        class: App\Menu\Builder
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main_menu }

    app.admin.course:
        class: App\Admin\CourseAdmin
        arguments: [~, App\Entity\Course, ~]
        public: true
        tags:
            - { name: sonata.admin, manager_type: orm, label: Course }

    app.admin.group:
        class: App\Admin\GroupAdmin
        arguments: [~, App\Entity\Group, ~]
        public: true
        tags:
            - { name: sonata.admin, manager_type: orm, label: Group, group: default }

    app.admin.room:
        class: App\Admin\RoomAdmin
        arguments: [~, App\Entity\Room, ~]
        public: true
        tags:
            - { name: sonata.admin, manager_type: orm, label: Room }

    app.admin.teacher:
        class: App\Admin\TeacherAdmin
        arguments: [~, App\Entity\Teacher, ~]
        public: true
        tags:
            - { name: sonata.admin, manager_type: orm, label: Teacher }

    app.form.type.gender:
        class: App\Form\Type\GenderType
        tags:
            - { name: form.type, alias: gender }

    app.form.type.weekday:
        class: App\Form\Type\WeekdayType
        arguments:
            - '@app.form.transformer.weekday'
        tags:
            - { name: form.type, alias: weekday }

    app.form.transformer.weekday:
        class: App\Form\DataTransformer\WeekdayTransformer