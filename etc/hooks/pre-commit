#!/usr/bin/env bash

set -e

PHP_PATH=.

updated_phps=""

function finish() {
  cd -
  exit "$1"
}

echo ""
echo "Running pre-commit hookâ€¦ (you can omit this with --no-verify or -e, but don't)"

for i in $(git status -s | grep --regexp='^[AM].*\.php$'|cut -c 3-);
do
    updated_phps="$updated_phps $i"
done

cd ${PHP_PATH}
if [[ "$updated_phps" != "" ]]; then
    # Coding style php-cs-fixer
    echo ""
    echo "[INFO] Applying php-cs-fix"

    FILES_TO_CHECK=${updated_phps} make cs-fix-test

    # shellcheck disable=SC2086
    git add ${updated_phps}
fi

if [[ "$updated_phps" != "" ]]; then
    FILES_TO_CHECK=${updated_phps} make phpstan-check

    # Static analyser phpstan
    if [[ $? != 0 ]]; then
        echo ""
        echo "[KO] Cancelling. PHPStan detected bugs. Fix them and commit again"
        echo -e "${output}"
        finish 1
    fi
fi

# Install YAML Linter from https://github.com/adrienverge/yamllint/
if hash yamllint 2>/dev/null; then
    LINT_FILE=${PHP_PATH}/etc/yamllint/.yamllint

    if test -f "$LINT_FILE"; then
        echo "[INFO] Running YAML lint validations"
        git status --porcelain | grep -E '^[AM].*.(?:yml|yaml)$' | cut -c 3- | while read -r line; do
          FILES_TO_CHECK="${line}" make yamllint-check
            #yamllint -c ${PHP_PATH}/etc/yamllint/.yamllint
            if [[ $? != 0 ]]; then
                echo ""
                echo "[KO] Cancelling"
                finish 1
            fi
        done
    else
        echo "[INFO] Invalid .yamllint file"
    fi
else
    echo "[INFO] Yaml lint is not installed, omitting validation"
    echo "[INFO] Install using pip install --user yamllint"
fi

echo "[OK] Your code will be committed"
finish 0